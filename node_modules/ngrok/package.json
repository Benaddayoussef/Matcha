{
  "_from": "ngrok",
  "_id": "ngrok@3.2.5",
  "_inBundle": false,
  "_integrity": "sha512-FWWQJSg8A1L6prZmT53onZMiFiaY+CfDgS9YStKjbE3qf2WDmRdi6kNBFvQKD2ARSv/te+rqeizAOGSUH5X56w==",
  "_location": "/ngrok",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ngrok",
    "fetchSpec": "latest",
    "name": "ngrok",
    "raw": "ngrok",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngrok/-/ngrok-3.2.5.tgz",
  "_shasum": "db2153e7dc4827aeafcc13b187aec331516403d9",
  "_shrinkwrap": null,
  "_spec": "ngrok",
  "_where": "/app",
  "author": {
    "name": "bubenshchykov"
  },
  "bin": {
    "ngrok": "./bin/ngrok"
  },
  "bugs": {
    "url": "https://github.com/bubenshchykov/ngrok/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/node": "^8.10.50",
    "@types/request": "^2.48.2",
    "decompress-zip": "^0.3.2",
    "request": "^2.88.0",
    "request-promise-native": "^1.0.7",
    "uuid": "^3.3.2"
  },
  "deprecated": false,
  "description": "node wrapper for ngrok",
  "devDependencies": {
    "chai": "~3.5.0",
    "colors": "^1.3.3",
    "homedir": "^0.6.0",
    "mocha": "^5.2.0"
  },
  "engines": {
    "node": ">=8.3.0"
  },
  "files": [
    "bin/ngrok",
    "index.js",
    "ngrok.d.ts",
    "postinstall.js",
    "process.js"
  ],
  "homepage": "https://github.com/bubenshchykov/ngrok#readme",
  "keywords": [
    "localhost",
    "localtunnel",
    "ngrok",
    "tunneling",
    "webhook"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "name": "ngrok",
  "optionalDependencies": {},
  "readme": "ngrok [![Build Status](https://img.shields.io/travis/bubenshchykov/ngrok/master.svg)](https://travis-ci.org/bubenshchykov/ngrok) ![TypeScript compatible](https://img.shields.io/badge/typescript-compatible-brightgreen.svg) [![npm](https://img.shields.io/npm/v/ngrok.svg)](https://www.npmjs.com/package/ngrok) [![npm](https://img.shields.io/npm/dm/ngrok.svg)](https://www.npmjs.com/package/ngrok)\n=====\n\n![alt ngrok.com](https://ngrok.com/static/img/overview.png)\n\nusage\n===\n\n```javascript\nnpm install ngrok\nconst ngrok = require('ngrok');\n(async function() {\n  const url = await ngrok.connect();\n})();\n```\nor\n```bash\nnpm install ngrok -g\nngrok http 8080\n```\n\nThis module uses node>=8.3.0 with async-await. For callback-based version use [2.3.0](https://github.com/bubenshchykov/ngrok/blob/330674233e3ec77688bb692bf1eb007810c4e30d/README.md)\n\nFor global install on Linux, you might need to run ```sudo npm install --unsafe-perm -g ngrok``` due to the [nature](https://github.com/bubenshchykov/ngrok/issues/115#issuecomment-380927124) of npm postinstall script.\n\n## authtoken\nYou can create basic http-https-tcp tunnel without [authtoken](https://ngrok.com/docs#authtoken). For custom subdomains and more you should  obtain authtoken by signing up at [ngrok.com](https://ngrok.com). Once you set it, it's stored in ngrok config and used for all tunnels. Few ways:\n\n```javascript\nawait ngrok.authtoken(token);\nawait ngrok.connect({authtoken: token, ...});\n```\n\n## connect\n```javascript\nconst url = await ngrok.connect(); // https://757c1652.ngrok.io -> http://localhost:80\nconst url = await ngrok.connect(9090); // https://757c1652.ngrok.io -> http://localhost:9090\nconst url = await ngrok.connect({proto: 'tcp', addr: 22}); // tcp://0.tcp.ngrok.io:48590\nconst url = await ngrok.connect(opts);\n```\n\n## options\n```javascript\nconst url = await ngrok.connect({\n\tproto: 'http', // http|tcp|tls, defaults to http\n\taddr: 8080, // port or network address, defaults to 80\n\tauth: 'user:pwd', // http basic authentication for tunnel\n\tsubdomain: 'alex', // reserved tunnel name https://alex.ngrok.io\n\tauthtoken: '12345', // your authtoken from ngrok.com\n\tregion: 'us', // one of ngrok regions (us, eu, au, ap), defaults to us\n\tconfigPath: '~/git/project/ngrok.yml', // custom path for ngrok config file\n\tbinPath: default => default.replace('app.asar', 'app.asar.unpacked'), // custom binary path, eg for prod in electron\n\tonStatusChange: status => {}, // 'closed' - connection is lost, 'connected' - reconnected\n\tonLogEvent: data => {}, // returns stdout messages from ngrok process\n});\n```\n\nOther options: `name, inspect, host_header, bind_tls, hostname, crt, key, client_cas, remote_addr` - read [here](https://ngrok.com/docs)\n\nNote on regions: region used in first tunnel will be used for all next tunnels too.\n\n## disconnect\nThe ngrok and all tunnels will be killed when node process is done. To stop the tunnels use\n```javascript\nawait ngrok.disconnect(url); // stops one\nawait ngrok.disconnect(); // stops all\nawait ngrok.kill(); // kills ngrok process\n```\n\nNote on http tunnels: by default bind_tls is true, so whenever you use http proto two tunnels are created - http and https. If you disconnect https tunnel, http tunnel remains open. You might want to close them both by passing http-version url, or simply by disconnecting all in one go ```ngrok.disconnect()```.\n\n## configs\nYou can use ngrok's [configurations files](https://ngrok.com/docs#config), and just pass `name` option when making a tunnel. Configuration files allow to store tunnel options. Ngrok looks for them here:\n```\nOS X\t/Users/example/.ngrok2/ngrok.yml\nLinux\t/home/example/.ngrok2/ngrok.yml\nWindows\tC:\\Users\\example\\.ngrok2\\ngrok.yml\n```\nYou can specify a custom `configPath` when making a tunnel.\n\n## inspector\nWhen tunnel is established you can use the ngrok interface http://127.0.0.1:4040 to inspect the webhooks done via ngrok.\nSame url hosts internal [client api](https://ngrok.com/docs#client-api). You can get it as wrapped request and manage tunnels yourself.\n```javascript\nconst url = await ngrok.connect();\nconst api = ngrok.getApi();\nconst tunnels = await api.get('api/tunnels');\n```\nYou can also get it as string url\n```javascript\nconst url = await ngrok.connect();\nconst apiUrl = ngrok.getUrl();\n```\n\n## proxy\n- If you are behind a corporate proxy an have issues installing ngrok, you can set ```HTTP_PROXY``` or ```HTTPS_PROXY``` env var to fix it. Ngrok's posinstall uses request module to fetch the binary, [and request supports these env vars](https://github.com/request/request#controlling-proxy-behaviour-using-environment-variables)\n- If you are using a CA file, set the path in the environment variable `NGROK_ROOT_CA_PATH`. The path is needed for downloading the ngrok binary in the postinstall script.\n\n## how it works\n```npm install``` downloads ngrok binary for your platform from official ngrok hosting. To host binaries yourself set NGROK_CDN_URL env var before installing ngrok. To force specific platform set NGROK_ARCH, eg NGROK_ARCH=freebsdia32\n\nFirst time you create tunnel ngrok process is spawned and runs until you disconnect or when parent process killed. All further tunnels are created or stopped by using internal ngrok api which usually runs on http://127.0.0.1:4040\n\n## contributors\nPlease run ```git update-index --assume-unchanged bin/ngrok``` to not override [ngrok stub](https://github.com/bubenshchykov/ngrok/blob/master/bin/ngrok) in your pr. Unfortunately it can't be gitignored.\n\nTest suite covers basics usage without authtoken, as well as features available for free and paid authtokens. You can supply your own tokens into env vars, otherwise warning given and some specs are ignored (locally and in PR builds). Travis supplies real tokens to master branch and runs all specs always.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bubenshchykov/ngrok.git"
  },
  "scripts": {
    "postinstall": "node ./postinstall.js",
    "postupdate": "node ./postinstall.js",
    "test": "node ./node_modules/mocha/bin/_mocha --exit"
  },
  "types": "ngrok.d.ts",
  "version": "3.2.5"
}
